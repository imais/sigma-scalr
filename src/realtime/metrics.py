from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver


class MetricsServerClient(LineReceiver):
	def __init__(self, msg_handler):
		self.msg_handler = msg_handler
		LineReceiver.delimiter = b'\n'	# newline generated by Linux terminals

	def dataReceived(self, data):
		self.msg_handler(self, data)
		

class MetricsServerClientFactory(ClientFactory):
	def __init__(self, msg_handler):
		self.msg_handler = msg_handler

    def startedConnecting(self, connector):
        log.info('Started to connect')

    def buildProtocol(self, addr):
        long.info('Connected from {}'.format(addr))
        return MetricsServerClient(self.msg_handler)

    def clientConnectionLost(self, connector, reason):
        log.info('Lost connection, reason: {}'.format(reason))

    def clientConnectionFailed(self, connector, reason):
        log.info('Connection failed, reason: {}'.format(reason))

